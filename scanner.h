typedef enum token_codes {
    INTVALUE, FLOATVALUE, STRINGVALUE, CHARVALUE, IDENTIFIER, SEMICOLON, END_OF_FILE, OTHER, AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ELSE, ENUM, EXTERN, FLOAT, FOR, GOTO, IF, INT,
    LONG, REGISTER, RETURN, SHORT, SIGNED, SIZEOF, STATIC, STRUCT, SWITCH, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, WHILE, VIRGULILLA, EXCLAMATIONMARK, NUMBERSIGN,
    DOLLARSIGN, PERCENTSIGN, CARET, AMPERSAND, ASTERISK, LEFTPARENTHESIS, RIGHTPARENTHESIS, UNDERSCORE, PLUSSIGN, VERTICALSIGN, BACKSLASH, APOSTROPHE, MINUSSIGN,
    EQUALSIGN, LEFTBRACE, RIGHTBRACE, LEFTBRACKET, RIGHTBRACKET, COLON, DOUBLEQUOTATIONMARK, SIMPLEQUOTATIONMARK, OPENINGANGLEBRACKET, CLOSINGANGLEBRACKET, QUESTIONMARK,
    COMMA, PERIOD, SLASH, INCREMENTOP, DECREMENTOP, EQUALOP, NOTEQUALOP, GREATEROREQUALTHANOP, LESSOREQUALTHANOP, ANDOP, OROP, LEFTSHIFTOP, RIGHTSHIFTOP, ADDASSIGNMENTOP,
    SUBSTRACTASSIGNMENTOP, MULTASSIGNMENTOP, DIVASSIGNMENTOP, MODASSIGNMENTOP, LEFTSHIFTASSIGNMENTOP, RIGHTSHIFTASSIGNMENTOP, BITWISEASSIGNMENTOP, BITWISEEXCLUSIVEASSIGNMENTOP, 
    BITWISEINCLUSIVEASSIGNMENTOP, TAB, NEWLINE
} token_code;

typedef enum token_types {
    KEYWORD, OPERATOR, STRING, CONSTANT, SPECIALCHAR, IDENT, ERROR
} token_type;

typedef struct tokens{
    token_code code;
    char *valuechar;
    int valueint;
    float valuefloat;
} token;

struct tokens Get_Token(void);

void change_input(char *file);
void finish(void);

